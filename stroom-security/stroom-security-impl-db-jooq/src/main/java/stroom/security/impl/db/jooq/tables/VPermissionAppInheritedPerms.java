/*
 * This file is generated by jOOQ.
 */
package stroom.security.impl.db.jooq.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.security.impl.db.jooq.Stroom;
import stroom.security.impl.db.jooq.tables.records.VPermissionAppInheritedPermsRecord;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VPermissionAppInheritedPerms extends TableImpl<VPermissionAppInheritedPermsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>stroom.v_permission_app_inherited_perms</code>
     */
    public static final VPermissionAppInheritedPerms V_PERMISSION_APP_INHERITED_PERMS = new VPermissionAppInheritedPerms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VPermissionAppInheritedPermsRecord> getRecordType() {
        return VPermissionAppInheritedPermsRecord.class;
    }

    /**
     * The column
     * <code>stroom.v_permission_app_inherited_perms.user_uuid</code>.
     */
    public final TableField<VPermissionAppInheritedPermsRecord, String> USER_UUID = createField(DSL.name("user_uuid"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column
     * <code>stroom.v_permission_app_inherited_perms.group_uuid</code>.
     */
    public final TableField<VPermissionAppInheritedPermsRecord, String> GROUP_UUID = createField(DSL.name("group_uuid"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.v_permission_app_inherited_perms.perms</code>.
     */
    public final TableField<VPermissionAppInheritedPermsRecord, String> PERMS = createField(DSL.name("perms"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>stroom.v_permission_app_inherited_perms.inherited_perms</code>.
     */
    public final TableField<VPermissionAppInheritedPermsRecord, String> INHERITED_PERMS = createField(DSL.name("inherited_perms"), SQLDataType.CLOB, this, "");

    private VPermissionAppInheritedPerms(Name alias, Table<VPermissionAppInheritedPermsRecord> aliased) {
        this(alias, aliased, null);
    }

    private VPermissionAppInheritedPerms(Name alias, Table<VPermissionAppInheritedPermsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("""
        create view `v_permission_app_inherited_perms` as with recursive `cte` as (select `stroom`.`v`.`user_uuid` AS `user_uuid`,`stroom`.`v`.`group_uuid` AS `group_uuid`,`stroom`.`v`.`perms` AS `perms`,`stroom`.`v`.`parent_perms` AS `inherited_perms` from `stroom`.`v_permission_app_parent_perms` `v` union all select `stroom`.`v`.`user_uuid` AS `user_uuid`,`stroom`.`v`.`group_uuid` AS `group_uuid`,`stroom`.`v`.`perms` AS `perms`,if((`cte`.`inherited_perms` is null),`stroom`.`v`.`parent_perms`,if((`stroom`.`v`.`parent_perms` is null),`cte`.`inherited_perms`,concat(`cte`.`inherited_perms`,',',`stroom`.`v`.`parent_perms`))) AS `if (cte.inherited_perms is null, v.parent_perms,
        		    if (v.parent_perms is null, cte.inherited_perms,
        		        concat(cte.inherited_perms, ',', v.parent_perms)))` from (`cte` join `stroom`.`v_permission_app_parent_perms` `v` on((`cte`.`user_uuid` = `stroom`.`v`.`group_uuid`)))) select `cte`.`user_uuid` AS `user_uuid`,`cte`.`group_uuid` AS `group_uuid`,group_concat(distinct `cte`.`perms` separator ',') AS `perms`,group_concat(distinct `cte`.`inherited_perms` separator ',') AS `inherited_perms` from `cte` group by `cte`.`user_uuid`,`cte`.`group_uuid`
        """));
    }

    /**
     * Create an aliased <code>stroom.v_permission_app_inherited_perms</code>
     * table reference
     */
    public VPermissionAppInheritedPerms(String alias) {
        this(DSL.name(alias), V_PERMISSION_APP_INHERITED_PERMS);
    }

    /**
     * Create an aliased <code>stroom.v_permission_app_inherited_perms</code>
     * table reference
     */
    public VPermissionAppInheritedPerms(Name alias) {
        this(alias, V_PERMISSION_APP_INHERITED_PERMS);
    }

    /**
     * Create a <code>stroom.v_permission_app_inherited_perms</code> table
     * reference
     */
    public VPermissionAppInheritedPerms() {
        this(DSL.name("v_permission_app_inherited_perms"), null);
    }

    public <O extends Record> VPermissionAppInheritedPerms(Table<O> child, ForeignKey<O, VPermissionAppInheritedPermsRecord> key) {
        super(child, key, V_PERMISSION_APP_INHERITED_PERMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public VPermissionAppInheritedPerms as(String alias) {
        return new VPermissionAppInheritedPerms(DSL.name(alias), this);
    }

    @Override
    public VPermissionAppInheritedPerms as(Name alias) {
        return new VPermissionAppInheritedPerms(alias, this);
    }

    @Override
    public VPermissionAppInheritedPerms as(Table<?> alias) {
        return new VPermissionAppInheritedPerms(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VPermissionAppInheritedPerms rename(String name) {
        return new VPermissionAppInheritedPerms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VPermissionAppInheritedPerms rename(Name name) {
        return new VPermissionAppInheritedPerms(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VPermissionAppInheritedPerms rename(Table<?> name) {
        return new VPermissionAppInheritedPerms(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
