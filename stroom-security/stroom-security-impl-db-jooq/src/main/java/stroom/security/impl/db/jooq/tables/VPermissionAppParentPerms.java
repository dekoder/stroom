/*
 * This file is generated by jOOQ.
 */
package stroom.security.impl.db.jooq.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.security.impl.db.jooq.Stroom;
import stroom.security.impl.db.jooq.tables.records.VPermissionAppParentPermsRecord;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class VPermissionAppParentPerms extends TableImpl<VPermissionAppParentPermsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>stroom.v_permission_app_parent_perms</code>
     */
    public static final VPermissionAppParentPerms V_PERMISSION_APP_PARENT_PERMS = new VPermissionAppParentPerms();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VPermissionAppParentPermsRecord> getRecordType() {
        return VPermissionAppParentPermsRecord.class;
    }

    /**
     * The column <code>stroom.v_permission_app_parent_perms.uuid</code>.
     */
    public final TableField<VPermissionAppParentPermsRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.v_permission_app_parent_perms.name</code>.
     */
    public final TableField<VPermissionAppParentPermsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column
     * <code>stroom.v_permission_app_parent_perms.display_name</code>.
     */
    public final TableField<VPermissionAppParentPermsRecord, String> DISPLAY_NAME = createField(DSL.name("display_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.v_permission_app_parent_perms.full_name</code>.
     */
    public final TableField<VPermissionAppParentPermsRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>stroom.v_permission_app_parent_perms.is_group</code>.
     */
    public final TableField<VPermissionAppParentPermsRecord, Boolean> IS_GROUP = createField(DSL.name("is_group"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>stroom.v_permission_app_parent_perms.perms</code>.
     */
    public final TableField<VPermissionAppParentPermsRecord, String> PERMS = createField(DSL.name("perms"), SQLDataType.CLOB, this, "");

    /**
     * The column
     * <code>stroom.v_permission_app_parent_perms.parent_perms</code>.
     */
    public final TableField<VPermissionAppParentPermsRecord, String> PARENT_PERMS = createField(DSL.name("parent_perms"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>stroom.v_permission_app_parent_perms.group_uuid</code>.
     */
    public final TableField<VPermissionAppParentPermsRecord, String> GROUP_UUID = createField(DSL.name("group_uuid"), SQLDataType.VARCHAR(255), this, "");

    private VPermissionAppParentPerms(Name alias, Table<VPermissionAppParentPermsRecord> aliased) {
        this(alias, aliased, null);
    }

    private VPermissionAppParentPerms(Name alias, Table<VPermissionAppParentPermsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `v_permission_app_parent_perms` as select `su`.`uuid` AS `uuid`,`su`.`name` AS `name`,`su`.`display_name` AS `display_name`,`su`.`full_name` AS `full_name`,`su`.`is_group` AS `is_group`,group_concat(`pa`.`permission_id` separator ',') AS `perms`,group_concat(`pa_parent`.`permission_id` separator ',') AS `parent_perms`,`sug`.`group_uuid` AS `group_uuid` from (((`stroom`.`stroom_user` `su` left join `stroom`.`stroom_user_group` `sug` on((`sug`.`user_uuid` = `su`.`uuid`))) left join `stroom`.`permission_app` `pa` on((`pa`.`user_uuid` = `su`.`uuid`))) left join `stroom`.`permission_app` `pa_parent` on((`pa_parent`.`user_uuid` = `sug`.`group_uuid`))) group by `su`.`uuid`,`sug`.`group_uuid`"));
    }

    /**
     * Create an aliased <code>stroom.v_permission_app_parent_perms</code> table
     * reference
     */
    public VPermissionAppParentPerms(String alias) {
        this(DSL.name(alias), V_PERMISSION_APP_PARENT_PERMS);
    }

    /**
     * Create an aliased <code>stroom.v_permission_app_parent_perms</code> table
     * reference
     */
    public VPermissionAppParentPerms(Name alias) {
        this(alias, V_PERMISSION_APP_PARENT_PERMS);
    }

    /**
     * Create a <code>stroom.v_permission_app_parent_perms</code> table
     * reference
     */
    public VPermissionAppParentPerms() {
        this(DSL.name("v_permission_app_parent_perms"), null);
    }

    public <O extends Record> VPermissionAppParentPerms(Table<O> child, ForeignKey<O, VPermissionAppParentPermsRecord> key) {
        super(child, key, V_PERMISSION_APP_PARENT_PERMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public VPermissionAppParentPerms as(String alias) {
        return new VPermissionAppParentPerms(DSL.name(alias), this);
    }

    @Override
    public VPermissionAppParentPerms as(Name alias) {
        return new VPermissionAppParentPerms(alias, this);
    }

    @Override
    public VPermissionAppParentPerms as(Table<?> alias) {
        return new VPermissionAppParentPerms(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public VPermissionAppParentPerms rename(String name) {
        return new VPermissionAppParentPerms(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VPermissionAppParentPerms rename(Name name) {
        return new VPermissionAppParentPerms(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public VPermissionAppParentPerms rename(Table<?> name) {
        return new VPermissionAppParentPerms(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, Boolean, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
