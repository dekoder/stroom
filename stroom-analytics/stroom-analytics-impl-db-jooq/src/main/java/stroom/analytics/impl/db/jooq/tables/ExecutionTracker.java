/*
 * This file is generated by jOOQ.
 */
package stroom.analytics.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.analytics.impl.db.jooq.Keys;
import stroom.analytics.impl.db.jooq.Stroom;
import stroom.analytics.impl.db.jooq.tables.records.ExecutionTrackerRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ExecutionTracker extends TableImpl<ExecutionTrackerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.execution_tracker</code>
     */
    public static final ExecutionTracker EXECUTION_TRACKER = new ExecutionTracker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExecutionTrackerRecord> getRecordType() {
        return ExecutionTrackerRecord.class;
    }

    /**
     * The column
     * <code>stroom.execution_tracker.fk_execution_schedule_id</code>.
     */
    public final TableField<ExecutionTrackerRecord, Integer> FK_EXECUTION_SCHEDULE_ID = createField(DSL.name("fk_execution_schedule_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>stroom.execution_tracker.actual_execution_time_ms</code>.
     */
    public final TableField<ExecutionTrackerRecord, Long> ACTUAL_EXECUTION_TIME_MS = createField(DSL.name("actual_execution_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>stroom.execution_tracker.last_effective_execution_time_ms</code>.
     */
    public final TableField<ExecutionTrackerRecord, Long> LAST_EFFECTIVE_EXECUTION_TIME_MS = createField(DSL.name("last_effective_execution_time_ms"), SQLDataType.BIGINT, this, "");

    /**
     * The column
     * <code>stroom.execution_tracker.next_effective_execution_time_ms</code>.
     */
    public final TableField<ExecutionTrackerRecord, Long> NEXT_EFFECTIVE_EXECUTION_TIME_MS = createField(DSL.name("next_effective_execution_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    private ExecutionTracker(Name alias, Table<ExecutionTrackerRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExecutionTracker(Name alias, Table<ExecutionTrackerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.execution_tracker</code> table reference
     */
    public ExecutionTracker(String alias) {
        this(DSL.name(alias), EXECUTION_TRACKER);
    }

    /**
     * Create an aliased <code>stroom.execution_tracker</code> table reference
     */
    public ExecutionTracker(Name alias) {
        this(alias, EXECUTION_TRACKER);
    }

    /**
     * Create a <code>stroom.execution_tracker</code> table reference
     */
    public ExecutionTracker() {
        this(DSL.name("execution_tracker"), null);
    }

    public <O extends Record> ExecutionTracker(Table<O> child, ForeignKey<O, ExecutionTrackerRecord> key) {
        super(child, key, EXECUTION_TRACKER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public UniqueKey<ExecutionTrackerRecord> getPrimaryKey() {
        return Keys.KEY_EXECUTION_TRACKER_PRIMARY;
    }

    @Override
    public List<ForeignKey<ExecutionTrackerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EXECUTION_TRACKER_EXECUTION_SCHEDULE_ID);
    }

    private transient ExecutionSchedule _executionSchedule;

    /**
     * Get the implicit join path to the <code>stroom.execution_schedule</code>
     * table.
     */
    public ExecutionSchedule executionSchedule() {
        if (_executionSchedule == null)
            _executionSchedule = new ExecutionSchedule(this, Keys.EXECUTION_TRACKER_EXECUTION_SCHEDULE_ID);

        return _executionSchedule;
    }

    @Override
    public ExecutionTracker as(String alias) {
        return new ExecutionTracker(DSL.name(alias), this);
    }

    @Override
    public ExecutionTracker as(Name alias) {
        return new ExecutionTracker(alias, this);
    }

    @Override
    public ExecutionTracker as(Table<?> alias) {
        return new ExecutionTracker(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExecutionTracker rename(String name) {
        return new ExecutionTracker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExecutionTracker rename(Name name) {
        return new ExecutionTracker(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExecutionTracker rename(Table<?> name) {
        return new ExecutionTracker(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Long, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
