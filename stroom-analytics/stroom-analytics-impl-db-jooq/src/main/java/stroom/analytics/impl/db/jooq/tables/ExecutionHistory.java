/*
 * This file is generated by jOOQ.
 */
package stroom.analytics.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.analytics.impl.db.jooq.Keys;
import stroom.analytics.impl.db.jooq.Stroom;
import stroom.analytics.impl.db.jooq.tables.records.ExecutionHistoryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ExecutionHistory extends TableImpl<ExecutionHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.execution_history</code>
     */
    public static final ExecutionHistory EXECUTION_HISTORY = new ExecutionHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExecutionHistoryRecord> getRecordType() {
        return ExecutionHistoryRecord.class;
    }

    /**
     * The column <code>stroom.execution_history.id</code>.
     */
    public final TableField<ExecutionHistoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>stroom.execution_history.fk_execution_schedule_id</code>.
     */
    public final TableField<ExecutionHistoryRecord, Integer> FK_EXECUTION_SCHEDULE_ID = createField(DSL.name("fk_execution_schedule_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stroom.execution_history.execution_time_ms</code>.
     */
    public final TableField<ExecutionHistoryRecord, Long> EXECUTION_TIME_MS = createField(DSL.name("execution_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>stroom.execution_history.effective_execution_time_ms</code>.
     */
    public final TableField<ExecutionHistoryRecord, Long> EFFECTIVE_EXECUTION_TIME_MS = createField(DSL.name("effective_execution_time_ms"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>stroom.execution_history.status</code>.
     */
    public final TableField<ExecutionHistoryRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.execution_history.message</code>.
     */
    public final TableField<ExecutionHistoryRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.CLOB, this, "");

    private ExecutionHistory(Name alias, Table<ExecutionHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExecutionHistory(Name alias, Table<ExecutionHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stroom.execution_history</code> table reference
     */
    public ExecutionHistory(String alias) {
        this(DSL.name(alias), EXECUTION_HISTORY);
    }

    /**
     * Create an aliased <code>stroom.execution_history</code> table reference
     */
    public ExecutionHistory(Name alias) {
        this(alias, EXECUTION_HISTORY);
    }

    /**
     * Create a <code>stroom.execution_history</code> table reference
     */
    public ExecutionHistory() {
        this(DSL.name("execution_history"), null);
    }

    public <O extends Record> ExecutionHistory(Table<O> child, ForeignKey<O, ExecutionHistoryRecord> key) {
        super(child, key, EXECUTION_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<ExecutionHistoryRecord, Long> getIdentity() {
        return (Identity<ExecutionHistoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExecutionHistoryRecord> getPrimaryKey() {
        return Keys.KEY_EXECUTION_HISTORY_PRIMARY;
    }

    @Override
    public List<ForeignKey<ExecutionHistoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.EXECUTION_HISTORY_EXECUTION_SCHEDULE_ID);
    }

    private transient ExecutionSchedule _executionSchedule;

    /**
     * Get the implicit join path to the <code>stroom.execution_schedule</code>
     * table.
     */
    public ExecutionSchedule executionSchedule() {
        if (_executionSchedule == null)
            _executionSchedule = new ExecutionSchedule(this, Keys.EXECUTION_HISTORY_EXECUTION_SCHEDULE_ID);

        return _executionSchedule;
    }

    @Override
    public ExecutionHistory as(String alias) {
        return new ExecutionHistory(DSL.name(alias), this);
    }

    @Override
    public ExecutionHistory as(Name alias) {
        return new ExecutionHistory(alias, this);
    }

    @Override
    public ExecutionHistory as(Table<?> alias) {
        return new ExecutionHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExecutionHistory rename(String name) {
        return new ExecutionHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExecutionHistory rename(Name name) {
        return new ExecutionHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExecutionHistory rename(Table<?> name) {
        return new ExecutionHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Integer, Long, Long, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Integer, ? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Integer, ? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
