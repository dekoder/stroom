/*
 * This file is generated by jOOQ.
 */
package stroom.analytics.impl.db.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import stroom.analytics.impl.db.jooq.tables.ExecutionTracker;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ExecutionTrackerRecord extends UpdatableRecordImpl<ExecutionTrackerRecord> implements Record4<Integer, Long, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>stroom.execution_tracker.fk_execution_schedule_id</code>.
     */
    public void setFkExecutionScheduleId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>stroom.execution_tracker.fk_execution_schedule_id</code>.
     */
    public Integer getFkExecutionScheduleId() {
        return (Integer) get(0);
    }

    /**
     * Setter for
     * <code>stroom.execution_tracker.actual_execution_time_ms</code>.
     */
    public void setActualExecutionTimeMs(Long value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>stroom.execution_tracker.actual_execution_time_ms</code>.
     */
    public Long getActualExecutionTimeMs() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>stroom.execution_tracker.last_effective_execution_time_ms</code>.
     */
    public void setLastEffectiveExecutionTimeMs(Long value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>stroom.execution_tracker.last_effective_execution_time_ms</code>.
     */
    public Long getLastEffectiveExecutionTimeMs() {
        return (Long) get(2);
    }

    /**
     * Setter for
     * <code>stroom.execution_tracker.next_effective_execution_time_ms</code>.
     */
    public void setNextEffectiveExecutionTimeMs(Long value) {
        set(3, value);
    }

    /**
     * Getter for
     * <code>stroom.execution_tracker.next_effective_execution_time_ms</code>.
     */
    public Long getNextEffectiveExecutionTimeMs() {
        return (Long) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Long, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Long, Long, Long> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return ExecutionTracker.EXECUTION_TRACKER.FK_EXECUTION_SCHEDULE_ID;
    }

    @Override
    public Field<Long> field2() {
        return ExecutionTracker.EXECUTION_TRACKER.ACTUAL_EXECUTION_TIME_MS;
    }

    @Override
    public Field<Long> field3() {
        return ExecutionTracker.EXECUTION_TRACKER.LAST_EFFECTIVE_EXECUTION_TIME_MS;
    }

    @Override
    public Field<Long> field4() {
        return ExecutionTracker.EXECUTION_TRACKER.NEXT_EFFECTIVE_EXECUTION_TIME_MS;
    }

    @Override
    public Integer component1() {
        return getFkExecutionScheduleId();
    }

    @Override
    public Long component2() {
        return getActualExecutionTimeMs();
    }

    @Override
    public Long component3() {
        return getLastEffectiveExecutionTimeMs();
    }

    @Override
    public Long component4() {
        return getNextEffectiveExecutionTimeMs();
    }

    @Override
    public Integer value1() {
        return getFkExecutionScheduleId();
    }

    @Override
    public Long value2() {
        return getActualExecutionTimeMs();
    }

    @Override
    public Long value3() {
        return getLastEffectiveExecutionTimeMs();
    }

    @Override
    public Long value4() {
        return getNextEffectiveExecutionTimeMs();
    }

    @Override
    public ExecutionTrackerRecord value1(Integer value) {
        setFkExecutionScheduleId(value);
        return this;
    }

    @Override
    public ExecutionTrackerRecord value2(Long value) {
        setActualExecutionTimeMs(value);
        return this;
    }

    @Override
    public ExecutionTrackerRecord value3(Long value) {
        setLastEffectiveExecutionTimeMs(value);
        return this;
    }

    @Override
    public ExecutionTrackerRecord value4(Long value) {
        setNextEffectiveExecutionTimeMs(value);
        return this;
    }

    @Override
    public ExecutionTrackerRecord values(Integer value1, Long value2, Long value3, Long value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExecutionTrackerRecord
     */
    public ExecutionTrackerRecord() {
        super(ExecutionTracker.EXECUTION_TRACKER);
    }

    /**
     * Create a detached, initialised ExecutionTrackerRecord
     */
    public ExecutionTrackerRecord(Integer fkExecutionScheduleId, Long actualExecutionTimeMs, Long lastEffectiveExecutionTimeMs, Long nextEffectiveExecutionTimeMs) {
        super(ExecutionTracker.EXECUTION_TRACKER);

        setFkExecutionScheduleId(fkExecutionScheduleId);
        setActualExecutionTimeMs(actualExecutionTimeMs);
        setLastEffectiveExecutionTimeMs(lastEffectiveExecutionTimeMs);
        setNextEffectiveExecutionTimeMs(nextEffectiveExecutionTimeMs);
        resetChangedOnNotNull();
    }
}
