/*
 * This file is generated by jOOQ.
 */
package stroom.annotation.impl.db.jooq.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import stroom.annotation.impl.db.jooq.Keys;
import stroom.annotation.impl.db.jooq.Stroom;
import stroom.annotation.impl.db.jooq.tables.records.AnnotationGroupRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AnnotationGroup extends TableImpl<AnnotationGroupRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stroom.annotation_group</code>
     */
    public static final AnnotationGroup ANNOTATION_GROUP = new AnnotationGroup();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnnotationGroupRecord> getRecordType() {
        return AnnotationGroupRecord.class;
    }

    /**
     * The column <code>stroom.annotation_group.id</code>.
     */
    public final TableField<AnnotationGroupRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>stroom.annotation_group.uuid</code>.
     */
    public final TableField<AnnotationGroupRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_group.name</code>.
     */
    public final TableField<AnnotationGroupRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stroom.annotation_group.deleted</code>.
     */
    public final TableField<AnnotationGroupRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "");

    private AnnotationGroup(Name alias, Table<AnnotationGroupRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AnnotationGroup(Name alias, Table<AnnotationGroupRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>stroom.annotation_group</code> table reference
     */
    public AnnotationGroup(String alias) {
        this(DSL.name(alias), ANNOTATION_GROUP);
    }

    /**
     * Create an aliased <code>stroom.annotation_group</code> table reference
     */
    public AnnotationGroup(Name alias) {
        this(alias, ANNOTATION_GROUP);
    }

    /**
     * Create a <code>stroom.annotation_group</code> table reference
     */
    public AnnotationGroup() {
        this(DSL.name("annotation_group"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stroom.STROOM;
    }

    @Override
    public Identity<AnnotationGroupRecord, Integer> getIdentity() {
        return (Identity<AnnotationGroupRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AnnotationGroupRecord> getPrimaryKey() {
        return Keys.KEY_ANNOTATION_GROUP_PRIMARY;
    }

    @Override
    public List<UniqueKey<AnnotationGroupRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ANNOTATION_GROUP_ANNOTATION_GROUP_UUID_IDX, Keys.KEY_ANNOTATION_GROUP_ANNOTATION_GROUP_NAME_IDX);
    }

    @Override
    public AnnotationGroup as(String alias) {
        return new AnnotationGroup(DSL.name(alias), this);
    }

    @Override
    public AnnotationGroup as(Name alias) {
        return new AnnotationGroup(alias, this);
    }

    @Override
    public AnnotationGroup as(Table<?> alias) {
        return new AnnotationGroup(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationGroup rename(String name) {
        return new AnnotationGroup(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationGroup rename(Name name) {
        return new AnnotationGroup(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AnnotationGroup rename(Table<?> name) {
        return new AnnotationGroup(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationGroup where(Condition condition) {
        return new AnnotationGroup(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationGroup where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationGroup where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationGroup where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationGroup where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationGroup where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationGroup where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public AnnotationGroup where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationGroup whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public AnnotationGroup whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
